generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accounts {
  account_id                                                   BigInt              @id @unique(map: "account_id_UNIQUE") @default(autoincrement())
  name                                                         String              @db.VarChar(255)
  type                                                         String              @db.VarChar(45)
  description                                                  String?             @db.LongText
  exclude_from_budgets                                         Boolean
  status                                                       String              @db.VarChar(45)
  users_user_id                                                BigInt
  current_balance                                              BigInt?             @default(0)
  created_timestamp                                            BigInt?
  updated_timestamp                                            BigInt?
  color_gradient                                               String?             @db.VarChar(45)
  users                                                        users               @relation(fields: [users_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "accounts_users_user_id_fk")
  balances_snapshot                                            balances_snapshot[]
  transactions_transactions_accounts_account_to_idToaccounts   transactions[]      @relation("transactions_accounts_account_to_idToaccounts")
  transactions_transactions_accounts_account_from_idToaccounts transactions[]      @relation("transactions_accounts_account_from_idToaccounts")

  @@unique([name, users_user_id], map: "name_UNIQUE")
  @@index([users_user_id], map: "fk_accounts_users1_idx")
}

model balances_snapshot {
  accounts_account_id BigInt
  month               Int
  year                Int
  balance             BigInt   @default(0)
  created_timestamp   BigInt
  updated_timestamp   BigInt?
  accounts            accounts @relation(fields: [accounts_account_id], references: [account_id], onDelete: NoAction, onUpdate: NoAction, map: "balances_snapshot_accounts_account_id_fk")

  @@id([accounts_account_id, month, year])
  @@index([accounts_account_id], map: "fk_balances_snapshot_accounts1_idx")
}

model budgets {
  budget_id              BigInt                   @unique(map: "budget_id_UNIQUE") @default(autoincrement())
  month                  Int
  year                   Int
  observations           String?                  @db.LongText
  is_open                Boolean
  initial_balance        BigInt?
  users_user_id          BigInt
  users                  users                    @relation(fields: [users_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "budgets_users_user_id_fk")
  budgets_has_categories budgets_has_categories[]

  @@id([budget_id, users_user_id])
  @@unique([month, year, users_user_id], map: "uq_month_year_user")
  @@index([users_user_id], map: "fk_budgets_users1_idx")
}

model budgets_has_categories {
  budgets_budget_id      BigInt
  budgets_users_user_id  BigInt
  categories_category_id BigInt
  planned_amount_credit  BigInt     @default(0)
  current_amount         BigInt     @default(0)
  planned_amount_debit   BigInt     @default(0)
  budgets                budgets    @relation(fields: [budgets_budget_id], references: [budget_id], onDelete: NoAction, onUpdate: NoAction, map: "budgets_has_categories_budgets_budget_id_fk")
  categories             categories @relation(fields: [categories_category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "budgets_has_categories_categories_category_id_fk")
  users                  users      @relation(fields: [budgets_users_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "budgets_has_categories_users_user_id_fk")

  @@id([budgets_budget_id, budgets_users_user_id, categories_category_id])
  @@index([budgets_budget_id, budgets_users_user_id], map: "fk_budgets_has_categories_budgets1_idx")
  @@index([categories_category_id], map: "fk_budgets_has_categories_categories1_idx")
  @@index([budgets_users_user_id], map: "budgets_has_categories_users_user_id_fk")
}

model categories {
  category_id            BigInt                   @id @default(autoincrement())
  name                   String                   @db.VarChar(255)
  type                   String                   @db.Char(1)
  users_user_id          BigInt
  description            String?                  @db.LongText
  color_gradient         String?                  @db.VarChar(45)
  status                 String                   @default("Ativa") @db.VarChar(45)
  exclude_from_budgets   Int                      @default(0) @db.TinyInt
  budgets_has_categories budgets_has_categories[]
  users                  users                    @relation(fields: [users_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "categories_users_user_id_fk")
  transactions           transactions[]

  @@unique([users_user_id, type, name], map: "uq_name_type_user_id")
  @@index([users_user_id], map: "fk_category_users_idx")
}

model entities {
  entity_id     BigInt         @id @unique(map: "entity_id_UNIQUE") @default(autoincrement())
  name          String         @db.VarChar(255)
  users_user_id BigInt
  users         users          @relation(fields: [users_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "entities_users_user_id_fk")
  transactions  transactions[]

  @@unique([name, users_user_id], map: "name_UNIQUE")
  @@index([users_user_id], map: "fk_entities_users1_idx")
  @@index([name], map: "name")
}

model invest_asset_evo_snapshot {
  month                  Int
  year                   Int
  units                  Decimal       @db.Decimal(16, 6)
  invested_amount        BigInt
  current_value          BigInt
  invest_assets_asset_id BigInt
  created_at             BigInt
  updated_at             BigInt
  withdrawn_amount       BigInt
  invest_assets          invest_assets @relation(fields: [invest_assets_asset_id], references: [asset_id], onDelete: NoAction, onUpdate: NoAction, map: "invest_asset_evo_snapshot_invest_assets_asset_id_fk")

  @@id([month, year, invest_assets_asset_id])
  @@unique([month, year, invest_assets_asset_id], map: "uq_month_year_invest_assets_asset_id")
  @@index([invest_assets_asset_id], map: "fk_invest_asset_evo_snapshot_invest_assets1_idx")
}

model invest_assets {
  asset_id                  BigInt                      @id @unique(map: "asset_id_UNIQUE") @default(autoincrement())
  name                      String                      @db.VarChar(75)
  ticker                    String?                     @db.VarChar(45)
  units                     Decimal                     @db.Decimal(16, 6)
  type                      String                      @db.VarChar(75)
  broker                    String?                     @db.VarChar(45)
  created_at                BigInt
  updated_at                BigInt?
  users_user_id             BigInt
  invest_asset_evo_snapshot invest_asset_evo_snapshot[]
  invest_transactions       invest_transactions[]

  @@unique([name, type, users_user_id], map: "users_user_id_type_name_unique")
  @@index([users_user_id], map: "fk_invest_assets_users1_idx")
}

model invest_desired_allocations {
  desired_allocations_id BigInt @unique(map: "desired_allocations_id_UNIQUE") @default(autoincrement())
  type                   String @unique(map: "type_UNIQUE") @db.VarChar(75)
  alloc_percentage       Float? @db.Float
  users_user_id          BigInt
  users                  users  @relation(fields: [users_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "invest_desired_allocations_users_user_id_fk")

  @@id([desired_allocations_id, type])
  @@index([users_user_id], map: "fk_invest_desired_allocations_users1_idx")
}

model invest_transactions {
  transaction_id         BigInt                   @id @unique(map: "transaction_id_UNIQUE") @default(autoincrement())
  date_timestamp         BigInt
  type                   invest_transactions_type
  note                   String?                  @db.VarChar(100)
  total_price            BigInt
  units                  Decimal                  @db.Decimal(16, 6)
  fees_taxes             BigInt?                  @default(0)
  invest_assets_asset_id BigInt
  created_at             BigInt
  updated_at             BigInt
  invest_assets          invest_assets            @relation(fields: [invest_assets_asset_id], references: [asset_id], onDelete: NoAction, onUpdate: NoAction, map: "invest_transactions_invest_assets_asset_id_fk")

  @@index([invest_assets_asset_id], map: "fk_invest_transactions_invest_assets1_idx")
}

model rules {
  rule_id                          BigInt  @default(autoincrement())
  matcher_description_operator     String? @db.VarChar(45)
  matcher_description_value        String? @db.VarChar(45)
  matcher_amount_operator          String? @db.VarChar(45)
  matcher_amount_value             BigInt?
  matcher_type_operator            String? @db.VarChar(45)
  matcher_type_value               String? @db.VarChar(45)
  matcher_account_to_id_operator   String? @db.VarChar(45)
  matcher_account_to_id_value      BigInt?
  matcher_account_from_id_operator String? @db.VarChar(45)
  matcher_account_from_id_value    BigInt?
  assign_category_id               BigInt?
  assign_entity_id                 BigInt?
  assign_account_to_id             BigInt?
  assign_account_from_id           BigInt?
  assign_type                      String? @db.VarChar(45)
  users_user_id                    BigInt
  assign_is_essential              Boolean @default(false)
  users                            users   @relation(fields: [users_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "rules_users_user_id_fk")

  @@id([rule_id, users_user_id])
  @@index([users_user_id], map: "fk_rules_users1_idx")
}

model transactions {
  transaction_id                                           BigInt                 @id @unique(map: "transaction_id_UNIQUE") @default(autoincrement())
  date_timestamp                                           BigInt
  amount                                                   BigInt
  type                                                     String                 @db.Char(1)
  description                                              String?                @db.LongText
  entities_entity_id                                       BigInt?
  accounts_account_from_id                                 BigInt?
  accounts_account_to_id                                   BigInt?
  categories_category_id                                   BigInt?
  is_essential                                             Boolean                @default(false)
  transaction_has_tags                                     transaction_has_tags[]
  accounts_transactions_accounts_account_to_idToaccounts   accounts?              @relation("transactions_accounts_account_to_idToaccounts", fields: [accounts_account_to_id], references: [account_id], onDelete: NoAction, onUpdate: NoAction, map: "transactions_accounts_account_id_fk")
  accounts_transactions_accounts_account_from_idToaccounts accounts?              @relation("transactions_accounts_account_from_idToaccounts", fields: [accounts_account_from_id], references: [account_id], onDelete: NoAction, onUpdate: NoAction, map: "transactions_accounts_account_id_fk2")
  entities                                                 entities?              @relation(fields: [entities_entity_id], references: [entity_id], onUpdate: NoAction, map: "transactions_ibfk_1")
  categories                                               categories?            @relation(fields: [categories_category_id], references: [category_id], onUpdate: NoAction, map: "transactions_ibfk_2")

  @@index([accounts_account_from_id, accounts_account_to_id], map: "fk_transactions_accounts1_idx")
  @@index([categories_category_id], map: "fk_transactions_categories1_idx")
  @@index([entities_entity_id], map: "fk_transactions_entities2_idx")
  @@index([accounts_account_to_id], map: "transactions_accounts_account_to_id_index")
}

model users {
  user_id                    BigInt                       @id @default(autoincrement())
  username                   String                       @unique(map: "username_UNIQUE") @db.VarChar(45)
  password                   String                       @db.MediumText
  email                      String                       @unique(map: "email_UNIQUE") @db.VarChar(45)
  sessionkey                 String?                      @db.MediumText
  sessionkey_mobile          String?                      @db.MediumText
  trustlimit                 Int?
  trustlimit_mobile          Int?
  last_update_timestamp      BigInt                       @default(0)
  accounts                   accounts[]
  budgets                    budgets[]
  budgets_has_categories     budgets_has_categories[]
  categories                 categories[]
  entities                   entities[]
  invest_desired_allocations invest_desired_allocations[]
  otp_codes                  otp_codes[]
  rules                      rules[]
  tags                       tags[]
}

model tags {
  tag_id               BigInt                 @id @default(autoincrement())
  description          String?                @db.LongText
  name                 String                 @db.VarChar(255)
  users_user_id        BigInt
  users                users                  @relation(fields: [users_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_user_id")
  transaction_has_tags transaction_has_tags[]

  @@unique([name, users_user_id], map: "uq_name")
  @@index([users_user_id], map: "fk_users_user_id")
}

model transaction_has_tags {
  transactions_transaction_id BigInt
  tags_tag_id                 BigInt
  tags                        tags         @relation(fields: [tags_tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_has_tags_tags_tag_id_fk")
  transactions                transactions @relation(fields: [transactions_transaction_id], references: [transaction_id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_has_tags_transactions_transaction_id_fk")

  @@id([tags_tag_id, transactions_transaction_id])
  @@index([transactions_transaction_id], map: "transaction_has_tags_transactions_transaction_id_fk")
}

model otp_codes {
  otp_id        BigInt  @id @default(autoincrement())
  users_user_id BigInt
  code          String  @unique(map: "otp_codes_pk_2") @db.VarChar(200)
  used          Boolean
  created_at    BigInt
  expires_at    BigInt
  users         users   @relation(fields: [users_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "otp_codes_users_user_id_fk")

  @@index([users_user_id], map: "otp_codes_users_user_id_fk")
}

enum invest_transactions_type {
  B
  S
}
